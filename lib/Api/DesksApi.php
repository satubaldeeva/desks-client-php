<?php
/**
 * DesksApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Satubaldeeva\DesksClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Desks - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Satubaldeeva\DesksClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Satubaldeeva\DesksClient\ApiException;
use Satubaldeeva\DesksClient\Configuration;
use Satubaldeeva\DesksClient\HeaderSelector;
use Satubaldeeva\DesksClient\ObjectSerializer;

/**
 * DesksApi Class Doc Comment
 *
 * @category Class
 * @package  Satubaldeeva\DesksClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DesksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addDesks' => [
            'application/json',
        ],
        'deleteDeskById' => [
            'application/json',
        ],
        'getDesks' => [
            'application/json',
        ],
        'getDesksById' => [
            'application/json',
        ],
        'replaceDeskById' => [
            'application/json',
        ],
        'searchDesks' => [
            'application/json',
        ],
        'updateDeskById' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addDesks
     *
     * Create a new desk
     *
     * @param  \Satubaldeeva\DesksClient\Dto\CreateDeskRequest $create_desk_request Create a new desks (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDesks'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Satubaldeeva\DesksClient\Dto\DeskResponse
     */
    public function addDesks($create_desk_request, string $contentType = self::contentTypes['addDesks'][0])
    {
        list($response) = $this->addDesksWithHttpInfo($create_desk_request, $contentType);
        return $response;
    }

    /**
     * Operation addDesksWithHttpInfo
     *
     * Create a new desk
     *
     * @param  \Satubaldeeva\DesksClient\Dto\CreateDeskRequest $create_desk_request Create a new desks (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDesks'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Satubaldeeva\DesksClient\Dto\DeskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDesksWithHttpInfo($create_desk_request, string $contentType = self::contentTypes['addDesks'][0])
    {
        $request = $this->addDesksRequest($create_desk_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Satubaldeeva\DesksClient\Dto\DeskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Satubaldeeva\DesksClient\Dto\DeskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addDesksAsync
     *
     * Create a new desk
     *
     * @param  \Satubaldeeva\DesksClient\Dto\CreateDeskRequest $create_desk_request Create a new desks (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDesksAsync($create_desk_request, string $contentType = self::contentTypes['addDesks'][0])
    {
        return $this->addDesksAsyncWithHttpInfo($create_desk_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDesksAsyncWithHttpInfo
     *
     * Create a new desk
     *
     * @param  \Satubaldeeva\DesksClient\Dto\CreateDeskRequest $create_desk_request Create a new desks (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDesksAsyncWithHttpInfo($create_desk_request, string $contentType = self::contentTypes['addDesks'][0])
    {
        $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
        $request = $this->addDesksRequest($create_desk_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDesks'
     *
     * @param  \Satubaldeeva\DesksClient\Dto\CreateDeskRequest $create_desk_request Create a new desks (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDesksRequest($create_desk_request, string $contentType = self::contentTypes['addDesks'][0])
    {

        // verify the required parameter 'create_desk_request' is set
        if ($create_desk_request === null || (is_array($create_desk_request) && count($create_desk_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_desk_request when calling addDesks'
            );
        }


        $resourcePath = '/desks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_desk_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_desk_request));
            } else {
                $httpBody = $create_desk_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeskById
     *
     * Delete a desks by ID
     *
     * @param  int $id ID of the desk to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeskById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDeskById($id, string $contentType = self::contentTypes['deleteDeskById'][0])
    {
        $this->deleteDeskByIdWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteDeskByIdWithHttpInfo
     *
     * Delete a desks by ID
     *
     * @param  int $id ID of the desk to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeskById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeskByIdWithHttpInfo($id, string $contentType = self::contentTypes['deleteDeskById'][0])
    {
        $request = $this->deleteDeskByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeskByIdAsync
     *
     * Delete a desks by ID
     *
     * @param  int $id ID of the desk to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeskByIdAsync($id, string $contentType = self::contentTypes['deleteDeskById'][0])
    {
        return $this->deleteDeskByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeskByIdAsyncWithHttpInfo
     *
     * Delete a desks by ID
     *
     * @param  int $id ID of the desk to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeskByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteDeskById'][0])
    {
        $returnType = '';
        $request = $this->deleteDeskByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeskById'
     *
     * @param  int $id ID of the desk to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDeskByIdRequest($id, string $contentType = self::contentTypes['deleteDeskById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDeskById'
            );
        }


        $resourcePath = '/desks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDesks
     *
     * Get all existing desks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesks'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Satubaldeeva\DesksClient\Dto\DeskResponse[]
     */
    public function getDesks(string $contentType = self::contentTypes['getDesks'][0])
    {
        list($response) = $this->getDesksWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getDesksWithHttpInfo
     *
     * Get all existing desks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesks'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Satubaldeeva\DesksClient\Dto\DeskResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDesksWithHttpInfo(string $contentType = self::contentTypes['getDesks'][0])
    {
        $request = $this->getDesksRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Satubaldeeva\DesksClient\Dto\DeskResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Satubaldeeva\DesksClient\Dto\DeskResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Satubaldeeva\DesksClient\Dto\DeskResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Satubaldeeva\DesksClient\Dto\DeskResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDesksAsync
     *
     * Get all existing desks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDesksAsync(string $contentType = self::contentTypes['getDesks'][0])
    {
        return $this->getDesksAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDesksAsyncWithHttpInfo
     *
     * Get all existing desks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDesksAsyncWithHttpInfo(string $contentType = self::contentTypes['getDesks'][0])
    {
        $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse[]';
        $request = $this->getDesksRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDesks'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDesksRequest(string $contentType = self::contentTypes['getDesks'][0])
    {


        $resourcePath = '/desks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDesksById
     *
     * Get a desk by ID
     *
     * @param  int $id ID of the desk to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesksById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Satubaldeeva\DesksClient\Dto\DeskResponse
     */
    public function getDesksById($id, string $contentType = self::contentTypes['getDesksById'][0])
    {
        list($response) = $this->getDesksByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDesksByIdWithHttpInfo
     *
     * Get a desk by ID
     *
     * @param  int $id ID of the desk to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesksById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Satubaldeeva\DesksClient\Dto\DeskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDesksByIdWithHttpInfo($id, string $contentType = self::contentTypes['getDesksById'][0])
    {
        $request = $this->getDesksByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Satubaldeeva\DesksClient\Dto\DeskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Satubaldeeva\DesksClient\Dto\DeskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDesksByIdAsync
     *
     * Get a desk by ID
     *
     * @param  int $id ID of the desk to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesksById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDesksByIdAsync($id, string $contentType = self::contentTypes['getDesksById'][0])
    {
        return $this->getDesksByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDesksByIdAsyncWithHttpInfo
     *
     * Get a desk by ID
     *
     * @param  int $id ID of the desk to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesksById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDesksByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDesksById'][0])
    {
        $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
        $request = $this->getDesksByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDesksById'
     *
     * @param  int $id ID of the desk to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDesksById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDesksByIdRequest($id, string $contentType = self::contentTypes['getDesksById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDesksById'
            );
        }


        $resourcePath = '/desks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceDeskById
     *
     * Replace a desk by ID
     *
     * @param  int $id ID of the desk to replace (required)
     * @param  \Satubaldeeva\DesksClient\Dto\ReplaceDeskRequest $replace_desk_request Updated desk  data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceDeskById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Satubaldeeva\DesksClient\Dto\DeskResponse
     */
    public function replaceDeskById($id, $replace_desk_request, string $contentType = self::contentTypes['replaceDeskById'][0])
    {
        list($response) = $this->replaceDeskByIdWithHttpInfo($id, $replace_desk_request, $contentType);
        return $response;
    }

    /**
     * Operation replaceDeskByIdWithHttpInfo
     *
     * Replace a desk by ID
     *
     * @param  int $id ID of the desk to replace (required)
     * @param  \Satubaldeeva\DesksClient\Dto\ReplaceDeskRequest $replace_desk_request Updated desk  data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceDeskById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Satubaldeeva\DesksClient\Dto\DeskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceDeskByIdWithHttpInfo($id, $replace_desk_request, string $contentType = self::contentTypes['replaceDeskById'][0])
    {
        $request = $this->replaceDeskByIdRequest($id, $replace_desk_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Satubaldeeva\DesksClient\Dto\DeskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Satubaldeeva\DesksClient\Dto\DeskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceDeskByIdAsync
     *
     * Replace a desk by ID
     *
     * @param  int $id ID of the desk to replace (required)
     * @param  \Satubaldeeva\DesksClient\Dto\ReplaceDeskRequest $replace_desk_request Updated desk  data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceDeskByIdAsync($id, $replace_desk_request, string $contentType = self::contentTypes['replaceDeskById'][0])
    {
        return $this->replaceDeskByIdAsyncWithHttpInfo($id, $replace_desk_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceDeskByIdAsyncWithHttpInfo
     *
     * Replace a desk by ID
     *
     * @param  int $id ID of the desk to replace (required)
     * @param  \Satubaldeeva\DesksClient\Dto\ReplaceDeskRequest $replace_desk_request Updated desk  data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceDeskByIdAsyncWithHttpInfo($id, $replace_desk_request, string $contentType = self::contentTypes['replaceDeskById'][0])
    {
        $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
        $request = $this->replaceDeskByIdRequest($id, $replace_desk_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceDeskById'
     *
     * @param  int $id ID of the desk to replace (required)
     * @param  \Satubaldeeva\DesksClient\Dto\ReplaceDeskRequest $replace_desk_request Updated desk  data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceDeskByIdRequest($id, $replace_desk_request, string $contentType = self::contentTypes['replaceDeskById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling replaceDeskById'
            );
        }

        // verify the required parameter 'replace_desk_request' is set
        if ($replace_desk_request === null || (is_array($replace_desk_request) && count($replace_desk_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replace_desk_request when calling replaceDeskById'
            );
        }


        $resourcePath = '/desks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($replace_desk_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($replace_desk_request));
            } else {
                $httpBody = $replace_desk_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDesks
     *
     * Search Desks
     *
     * @param  \Satubaldeeva\DesksClient\Dto\SearchDesksRequest $search_desks_request search_desks_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDesks'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Satubaldeeva\DesksClient\Dto\SearchDesksResponse
     */
    public function searchDesks($search_desks_request, string $contentType = self::contentTypes['searchDesks'][0])
    {
        list($response) = $this->searchDesksWithHttpInfo($search_desks_request, $contentType);
        return $response;
    }

    /**
     * Operation searchDesksWithHttpInfo
     *
     * Search Desks
     *
     * @param  \Satubaldeeva\DesksClient\Dto\SearchDesksRequest $search_desks_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDesks'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Satubaldeeva\DesksClient\Dto\SearchDesksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDesksWithHttpInfo($search_desks_request, string $contentType = self::contentTypes['searchDesks'][0])
    {
        $request = $this->searchDesksRequest($search_desks_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Satubaldeeva\DesksClient\Dto\SearchDesksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Satubaldeeva\DesksClient\Dto\SearchDesksResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Satubaldeeva\DesksClient\Dto\SearchDesksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Satubaldeeva\DesksClient\Dto\SearchDesksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Satubaldeeva\DesksClient\Dto\SearchDesksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDesksAsync
     *
     * Search Desks
     *
     * @param  \Satubaldeeva\DesksClient\Dto\SearchDesksRequest $search_desks_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDesksAsync($search_desks_request, string $contentType = self::contentTypes['searchDesks'][0])
    {
        return $this->searchDesksAsyncWithHttpInfo($search_desks_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDesksAsyncWithHttpInfo
     *
     * Search Desks
     *
     * @param  \Satubaldeeva\DesksClient\Dto\SearchDesksRequest $search_desks_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDesksAsyncWithHttpInfo($search_desks_request, string $contentType = self::contentTypes['searchDesks'][0])
    {
        $returnType = '\Satubaldeeva\DesksClient\Dto\SearchDesksResponse';
        $request = $this->searchDesksRequest($search_desks_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDesks'
     *
     * @param  \Satubaldeeva\DesksClient\Dto\SearchDesksRequest $search_desks_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDesks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchDesksRequest($search_desks_request, string $contentType = self::contentTypes['searchDesks'][0])
    {

        // verify the required parameter 'search_desks_request' is set
        if ($search_desks_request === null || (is_array($search_desks_request) && count($search_desks_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_desks_request when calling searchDesks'
            );
        }


        $resourcePath = '/desks:search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($search_desks_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($search_desks_request));
            } else {
                $httpBody = $search_desks_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeskById
     *
     * Update a desk by ID
     *
     * @param  int $id ID of the desk to update (required)
     * @param  \Satubaldeeva\DesksClient\Dto\PatchDeskRequest $patch_desk_request Updated desk data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeskById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Satubaldeeva\DesksClient\Dto\DeskResponse
     */
    public function updateDeskById($id, $patch_desk_request, string $contentType = self::contentTypes['updateDeskById'][0])
    {
        list($response) = $this->updateDeskByIdWithHttpInfo($id, $patch_desk_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeskByIdWithHttpInfo
     *
     * Update a desk by ID
     *
     * @param  int $id ID of the desk to update (required)
     * @param  \Satubaldeeva\DesksClient\Dto\PatchDeskRequest $patch_desk_request Updated desk data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeskById'] to see the possible values for this operation
     *
     * @throws \Satubaldeeva\DesksClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Satubaldeeva\DesksClient\Dto\DeskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeskByIdWithHttpInfo($id, $patch_desk_request, string $contentType = self::contentTypes['updateDeskById'][0])
    {
        $request = $this->updateDeskByIdRequest($id, $patch_desk_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Satubaldeeva\DesksClient\Dto\DeskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Satubaldeeva\DesksClient\Dto\DeskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Satubaldeeva\DesksClient\Dto\DeskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeskByIdAsync
     *
     * Update a desk by ID
     *
     * @param  int $id ID of the desk to update (required)
     * @param  \Satubaldeeva\DesksClient\Dto\PatchDeskRequest $patch_desk_request Updated desk data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeskByIdAsync($id, $patch_desk_request, string $contentType = self::contentTypes['updateDeskById'][0])
    {
        return $this->updateDeskByIdAsyncWithHttpInfo($id, $patch_desk_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeskByIdAsyncWithHttpInfo
     *
     * Update a desk by ID
     *
     * @param  int $id ID of the desk to update (required)
     * @param  \Satubaldeeva\DesksClient\Dto\PatchDeskRequest $patch_desk_request Updated desk data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeskByIdAsyncWithHttpInfo($id, $patch_desk_request, string $contentType = self::contentTypes['updateDeskById'][0])
    {
        $returnType = '\Satubaldeeva\DesksClient\Dto\DeskResponse';
        $request = $this->updateDeskByIdRequest($id, $patch_desk_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeskById'
     *
     * @param  int $id ID of the desk to update (required)
     * @param  \Satubaldeeva\DesksClient\Dto\PatchDeskRequest $patch_desk_request Updated desk data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeskById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeskByIdRequest($id, $patch_desk_request, string $contentType = self::contentTypes['updateDeskById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateDeskById'
            );
        }

        // verify the required parameter 'patch_desk_request' is set
        if ($patch_desk_request === null || (is_array($patch_desk_request) && count($patch_desk_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_desk_request when calling updateDeskById'
            );
        }


        $resourcePath = '/desks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_desk_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_desk_request));
            } else {
                $httpBody = $patch_desk_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
